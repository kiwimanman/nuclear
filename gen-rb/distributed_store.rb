#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'nuclear_types'

module DistributedStore
  class Client
    include ::Thrift::Client

    def put(key, value)
      send_put(key, value)
      return recv_put()
    end

    def send_put(key, value)
      send_message('put', Put_args, :key => key, :value => value)
    end

    def recv_put()
      result = receive_message(Put_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'put failed: unknown result')
    end

    def get(key)
      send_get(key)
      return recv_get()
    end

    def send_get(key)
      send_message('get', Get_args, :key => key)
    end

    def recv_get()
      result = receive_message(Get_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get failed: unknown result')
    end

    def remove(key)
      send_remove(key)
      return recv_remove()
    end

    def send_remove(key)
      send_message('remove', Remove_args, :key => key)
    end

    def recv_remove()
      result = receive_message(Remove_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'remove failed: unknown result')
    end

    def status(transaction_id)
      send_status(transaction_id)
      return recv_status()
    end

    def send_status(transaction_id)
      send_message('status', Status_args, :transaction_id => transaction_id)
    end

    def recv_status()
      result = receive_message(Status_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'status failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_put(seqid, iprot, oprot)
      args = read_args(iprot, Put_args)
      result = Put_result.new()
      result.success = @handler.put(args.key, args.value)
      write_result(result, oprot, 'put', seqid)
    end

    def process_get(seqid, iprot, oprot)
      args = read_args(iprot, Get_args)
      result = Get_result.new()
      result.success = @handler.get(args.key)
      write_result(result, oprot, 'get', seqid)
    end

    def process_remove(seqid, iprot, oprot)
      args = read_args(iprot, Remove_args)
      result = Remove_result.new()
      result.success = @handler.remove(args.key)
      write_result(result, oprot, 'remove', seqid)
    end

    def process_status(seqid, iprot, oprot)
      args = read_args(iprot, Status_args)
      result = Status_result.new()
      result.success = @handler.status(args.transaction_id)
      write_result(result, oprot, 'status', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Put_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1
    VALUE = 2

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
      VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Put_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Remove_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEY = 1

    FIELDS = {
      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Remove_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Status_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TRANSACTION_ID = 1

    FIELDS = {
      TRANSACTION_ID => {:type => ::Thrift::Types::STRING, :name => 'transaction_id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Status_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

