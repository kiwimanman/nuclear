#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'nuclear_types'

module Nuclear
  module Master
    class Client
      include ::Thrift::Client

      def cast_vote(transaction_id, vote)
        send_cast_vote(transaction_id, vote)
      end

      def send_cast_vote(transaction_id, vote)
        send_message('cast_vote', Cast_vote_args, :transaction_id => transaction_id, :vote => vote)
      end
      def status(transaction_id)
        send_status(transaction_id)
        return recv_status()
      end

      def send_status(transaction_id)
        send_message('status', Status_args, :transaction_id => transaction_id)
      end

      def recv_status()
        result = receive_message(Status_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'status failed: unknown result')
      end

    end

    class Processor
      include ::Thrift::Processor

      def process_cast_vote(seqid, iprot, oprot)
        args = read_args(iprot, Cast_vote_args)
        @handler.cast_vote(args.transaction_id, args.vote)
        return
      end

      def process_status(seqid, iprot, oprot)
        args = read_args(iprot, Status_args)
        result = Status_result.new()
        result.success = @handler.status(args.transaction_id)
        write_result(result, oprot, 'status', seqid)
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class Cast_vote_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TRANSACTION_ID = 1
      VOTE = 2

      FIELDS = {
        TRANSACTION_ID => {:type => ::Thrift::Types::STRING, :name => 'transaction_id'},
        VOTE => {:type => ::Thrift::Types::I32, :name => 'vote', :enum_class => ::Nuclear::Vote}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @vote.nil? || ::Nuclear::Vote::VALID_VALUES.include?(@vote)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field vote!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Cast_vote_result
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Status_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TRANSACTION_ID = 1

      FIELDS = {
        TRANSACTION_ID => {:type => ::Thrift::Types::STRING, :name => 'transaction_id'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Status_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Nuclear::Status}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @success.nil? || ::Nuclear::Status::VALID_VALUES.include?(@success)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

  end

end
