#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'nuclear_types'

module Nuclear
  module Replica
    class Client
      include ::Thrift::Client

      def put(key, value, transaction_id)
        send_put(key, value, transaction_id)
      end

      def send_put(key, value, transaction_id)
        send_message('put', Put_args, :key => key, :value => value, :transaction_id => transaction_id)
      end
      def get(key)
        send_get(key)
        return recv_get()
      end

      def send_get(key)
        send_message('get', Get_args, :key => key)
      end

      def recv_get()
        result = receive_message(Get_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get failed: unknown result')
      end

      def remove(key, transaction_id)
        send_remove(key, transaction_id)
      end

      def send_remove(key, transaction_id)
        send_message('remove', Remove_args, :key => key, :transaction_id => transaction_id)
      end
      def votereq(transaction_id)
        send_votereq(transaction_id)
      end

      def send_votereq(transaction_id)
        send_message('votereq', Votereq_args, :transaction_id => transaction_id)
      end
      def finalize(transaction_id, decision)
        send_finalize(transaction_id, decision)
      end

      def send_finalize(transaction_id, decision)
        send_message('finalize', Finalize_args, :transaction_id => transaction_id, :decision => decision)
      end
      def status(transaction_id)
        send_status(transaction_id)
        return recv_status()
      end

      def send_status(transaction_id)
        send_message('status', Status_args, :transaction_id => transaction_id)
      end

      def recv_status()
        result = receive_message(Status_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'status failed: unknown result')
      end

    end

    class Processor
      include ::Thrift::Processor

      def process_put(seqid, iprot, oprot)
        args = read_args(iprot, Put_args)
        @handler.put(args.key, args.value, args.transaction_id)
        return
      end

      def process_get(seqid, iprot, oprot)
        args = read_args(iprot, Get_args)
        result = Get_result.new()
        result.success = @handler.get(args.key)
        write_result(result, oprot, 'get', seqid)
      end

      def process_remove(seqid, iprot, oprot)
        args = read_args(iprot, Remove_args)
        @handler.remove(args.key, args.transaction_id)
        return
      end

      def process_votereq(seqid, iprot, oprot)
        args = read_args(iprot, Votereq_args)
        @handler.votereq(args.transaction_id)
        return
      end

      def process_finalize(seqid, iprot, oprot)
        args = read_args(iprot, Finalize_args)
        @handler.finalize(args.transaction_id, args.decision)
        return
      end

      def process_status(seqid, iprot, oprot)
        args = read_args(iprot, Status_args)
        result = Status_result.new()
        result.success = @handler.status(args.transaction_id)
        write_result(result, oprot, 'status', seqid)
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class Put_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      KEY = 1
      VALUE = 2
      TRANSACTION_ID = 3

      FIELDS = {
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
        VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'},
        TRANSACTION_ID => {:type => ::Thrift::Types::STRING, :name => 'transaction_id'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Put_result
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      KEY = 1

      FIELDS = {
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Remove_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      KEY = 1
      TRANSACTION_ID = 2

      FIELDS = {
        KEY => {:type => ::Thrift::Types::STRING, :name => 'key'},
        TRANSACTION_ID => {:type => ::Thrift::Types::STRING, :name => 'transaction_id'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Remove_result
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Votereq_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TRANSACTION_ID = 1

      FIELDS = {
        TRANSACTION_ID => {:type => ::Thrift::Types::STRING, :name => 'transaction_id'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Votereq_result
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Finalize_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TRANSACTION_ID = 1
      DECISION = 2

      FIELDS = {
        TRANSACTION_ID => {:type => ::Thrift::Types::STRING, :name => 'transaction_id'},
        DECISION => {:type => ::Thrift::Types::I32, :name => 'decision', :enum_class => ::Nuclear::Status}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @decision.nil? || ::Nuclear::Status::VALID_VALUES.include?(@decision)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field decision!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Finalize_result
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Status_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TRANSACTION_ID = 1

      FIELDS = {
        TRANSACTION_ID => {:type => ::Thrift::Types::STRING, :name => 'transaction_id'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Status_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Nuclear::Status}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @success.nil? || ::Nuclear::Status::VALID_VALUES.include?(@success)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

  end

end
